library(terra)
library(sf)
library(dplyr)
library(tidyr)
library(tigris)
library(sf)  # tigris returns sf objects

# Download all U.S. counties, then filter for Montana (state FIPS = "30")
mt_counties <- counties(state = "MT", cb = TRUE, year = 2022)
mt_counties <- st_transform(mt_counties, crs = "EPSG:4326")

# Step 2: Convert sf to SpatVector
mt_v <- vect(mt_counties)

# Initialize the output data frame
county_hourly_avg <- NULL

# Loop over each variable
for (i in seq_len(nrow(vars))) {
  this_var_name <- vars$var_name[i]
  
  folder_path <- paste0("data/", this_var_name) 
  filename <- fs::path(folder_path, paste0(this_var_name, "_", update_date, ".tif"))
  
  if (fs::file_exists(filename)) {
    message(glue::glue("File exists: loading {this_var_name} for {update_date}"))
    stack <- rast(filename)
    
    # Calculate County Hourly Avg
    temp_df <- lapply(seq_len(nlyr(stack)), function(j) {
      r <- stack[[j]]
      extracted <- terra::extract(r, mt_v, fun = mean, na.rm = TRUE)
      
      data.frame(
        county = mt_counties$NAME[extracted$ID],
        fcst_hour = j-1,
        timestamp_MDT = names(stack)[j],
        value = extracted[, 2]
      )
    }) %>% bind_rows()
    
    # Rename 'value' to this_var_name
    names(temp_df)[names(temp_df) == "value"] <- this_var_name
    
    # Merge into the main data frame
    if (is.null(county_hourly_avg)) {
      county_hourly_avg <- temp_df
    } else {
      county_hourly_avg <- dplyr::full_join(county_hourly_avg, temp_df,
                                            by = c("county", "fcst_hour", "timestamp_MDT"))
    }
    
  } else {
    message(glue::glue("File does not exist: adding empty column for {this_var_name}"))
    
    # If the main data frame exists, just add a column of NA
    if (!is.null(county_hourly_avg)) {
      county_hourly_avg[[this_var_name]] <- NA_real_
    }
  }
}

#--------------------------Calculate 10m Ventilation Rate-------------------------

county_hourly_avg <- county_hourly_avg %>%
  mutate(
    VENT_RATE = if (all(c("WIND_1hr_max_fcst", "HPBL") %in% names(.))) {
      WIND_1hr_max_fcst * HPBL
    } else {
      NA_real_
    }
  )

#--------------------------Calculate County 24-hr Avg-------------------------

county_24hr_avg <- county_hourly_avg %>%
  mutate(date = as.Date(timestamp_MDT)) %>%
  group_by(county, date) %>%
  summarise(
    across(all_of(vars$var_name), ~ mean(.x, na.rm = TRUE)),
    VENT_RATE = mean(VENT_RATE, na.rm = TRUE),
    .groups = "drop"
  )

# Only the 2nd date (i.e. the day after the 12 UTC/6 MDT ) will have a complete day of data for 24-hr averages
second_date <- sort(unique(county_24hr_avg$date))[2]

county_24hr_avg_second_day <- county_24hr_avg %>%
  filter(date == second_date)

#--------------------------Add AQI Data-------------------------

# Define your breakpoints and category labels
breaks <- c(0, 9, 35.4, 55.4, 125.4, 225.4, Inf)
labels <- c("Good", "Moderate", "Unhealthy for Sensitive Groups",
            "Unhealthy", "Very Unhealthy", "Hazardous")

county_hourly_avg <- county_hourly_avg %>%
  mutate(AQI_category = cut(MASSDEN,
                            breaks = breaks,
                            labels = labels,
                            right = TRUE, include.lowest = TRUE))

# Add the AQI category column based on mean_24hr_smoke_ug_m3
county_24hr_avg_second_day <- county_24hr_avg_second_day %>%
  mutate(AQI_category = cut(MASSDEN,
                            breaks = breaks,
                            labels = labels,
                            right = TRUE, include.lowest = TRUE))
library(readr)
write_rds(county_hourly_avg, here(paste0("data/county_hrly_avg/", update_date, "_county_hrly_avg.rds")))
write_rds(county_24hr_avg_second_day, here(paste0("data/county_24hr_avg/", update_date, "_county_24hr_avg.rds")))

