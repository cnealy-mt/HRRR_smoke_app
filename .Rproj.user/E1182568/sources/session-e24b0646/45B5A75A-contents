library(httr)
# Define start date and end date for the sequence
#start_date <- Sys.Date() - 3
#today <- Sys.Date()

today <- as.Date(update_date)
start_date <- today - 2

# Create a sequence of dates from start_date to today
date_sequence <- seq.Date(start_date, today, by = "day")

# Iterate through each date in the date_sequence
for (current_date in date_sequence) {
  
  # Define startDate (1 day before the current_date)
  chunk_start <- format(as.Date(current_date) - 2, "%Y-%m-%d")
  chunk_end <- format(as.Date(current_date), "%Y-%m-%d")
  
  # Format dates as YYYY-MM-DD for URL
  start_date_str <- format(as.Date(chunk_start), "%Y-%m-%d")
  end_date_str <- format(as.Date(chunk_end), "%Y-%m-%d")
  
  # Insert into URL
  url <- paste0("https://www.airnowapi.org/aq/data/?startDate=", start_date_str, "T12",
                "&endDate=", end_date_str, "T11",
                "&parameters=PM25,PM10&BBOX=-116.202774,44.045890,-103.722305,49.229925",
                "&dataType=C&format=text/csv&verbose=1&monitorType=0&includerawconcentrations=0",
                "&API_KEY=4A314159-4658-4690-8CE9-F716E5EABC20")
  
  col_names <- c("latitude", "longitude", "date_gmt", "parameter", "sample_measurement", 
                 "units_of_measure", "site_name", "monitoring_agency", "AQSID", "Full_AQSID")
  
  # Make the GET request
  response <- GET(url)
  
  # Check if the request was successful
  if (status_code(response) == 200) {
    csv_data <- content(response, "text")
    
    # Read the data into a data frame
    air_quality_data <- read_csv(csv_data)
    colnames(air_quality_data) <- col_names
    
    # Process the data (adjust time and create date_local, time_local)
    AirNow <- air_quality_data %>%
      mutate(
        # Ensure AQSID and Full_AQSID are both characters
        AQSID = as.character(AQSID),
        Full_AQSID = as.character(Full_AQSID),
        country_code = substr(Full_AQSID, 1, 3),
        state_code   = substr(Full_AQSID, 4, 5),
        county_code  = substr(Full_AQSID, 6, 8),
        site_number  = substr(Full_AQSID, 9, 12)) %>%
      filter(country_code == "840", state_code == "30")
    
  } else {
    print(paste("Failed to fetch data for", current_date, "Status code:", status_code(response)))
  }
}

# Remove rows where sample_measurement is less than -900
AirNow <- AirNow %>%
  filter(sample_measurement >= -900 & parameter == "PM2.5") 
  
saveRDS(AirNow, paste0("data/AirNow/", update_date, "_AirNow.rds"))

