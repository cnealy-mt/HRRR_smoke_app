# Join with blank lines between each
final_aqi_text <- paste(aqi_text_chunks, collapse = "\n\n")
final_aqi_text <- paste0(final_aqi_text, "\n")
cat(final_aqi_text)
health_messages <- list(
"Hazardous" = "When air quality is Hazardous... State and local health officials recommend that everyone should avoid any outdoor exertion; people with respiratory or heart disease, the elderly, and children should remain indoors.",
"Very Unhealthy" = "When air quality is Very Unhealthy... State and local health officials recommend that people with respiratory or heart disease, the elderly, and children should avoid any outdoor activity; everyone else should avoid prolonged exertion.",
"Unhealthy" = "When air quality is Unhealthy... State and local health officials recommend that people with respiratory or heart disease, the elderly, and children should avoid prolonged exertion; everyone else should limit prolonged exertion.",
"Unhealthy for Sensitive Groups" = "When air quality is Unhealthy for Sensitive Groups... State and local health officials recommend that people with respiratory or heart disease, the elderly and children should limit prolonged exertion.",
"Moderate" = "When air quality is Moderate... State and local health officials recommend that unusually sensitive people should consider reducing prolonged or heavy exertion."
)
# AQI levels in reverse severity order (most severe first)
aqi_levels <- c("Hazardous", "Very Unhealthy", "Unhealthy",
"Unhealthy for Sensitive Groups", "Moderate")
# Get unique AQI categories in the filtered data (excluding Good)
present_categories <- unique(aqi_filtered$AQI_category)
present_categories <- intersect(aqi_levels, present_categories)
# Assemble messages
health_text <- unlist(lapply(present_categories, function(cat) {
c(health_messages[[cat]], "")  # Add empty line after each
}))
more_information <- paste0("For more information visit the Montana Department of Environmental Quality at http://todaysair.mtdeq.us")
# Final output text
full_text <- c(header_lines, county_lines, alert_text, reason_text_block, final_aqi_text, health_text, more_information)
cat(full_text)
output$download_aqa_txt <- downloadHandler(
filename = function() {
cat("Generating filename with today =", today, "\n")
paste0(today, "_AQA_text_product.txt")
},
content = function(file) {
# Determine the correct file path based on the outlook choice
file_path <- if (aqi_outlook_choice() == "Tomorrow AQI Outlook") {
paste0("data/county_24hr_avg/", today, "_county_24hr_avg.rds")
} else {
paste0("data/county_24hr_avg/", today, "_updated_today_AQI_outlook.rds")
}
if (!file.exists(file_path)) {
writeLines("County data file not found.", file)
return()
}
df <- readRDS(file_path)
df <- df %>%
mutate(AQA_Required = case_when(
is.na(AQI_category) ~ "No",
AQI_category %in% c("Good", "Moderate") ~ "No",
TRUE ~ "Yes"
))
# Identify counties where AQA is required
aqa_counties <- df %>%
filter(AQA_Required == "Yes") %>%
pull(county)
# Prepare list of all counties with AQA flag
county_lines <- paste0(df$county, ";", df$AQA_Required)
# Standard header
header_lines <- c(
glue::glue("-Expiration Time: {exp_time()} on {format(exp_date(), '%m/%d/%Y')}"),
"",
"-Counties",
""
)
# Optional alert message if any 'Yes' present
alert_text <- character()
if (length(aqa_counties) > 0) {
alert_text <- c(
"",
"-Text for alert:",
glue::glue(
"The Montana Department of Environmental Quality has issued an air quality alert for {paste(aqa_counties, collapse = ', ')} counties in effect until {exp_time()} on {format(exp_date(), '%m/%d/%Y')}"
),
"An Air Quality Alert means that particulates have been trending upwards and that an exceedence of the 24 hour National Ambient Air Quality Standard (NAAQS) has occurred or may occur in the near future.",
""  # <-- line break after alert
)
}
# REASON FOR ALERT--------------------------------------------------------------------------
reason_text_block <- character()
if (!is.null(reason()) && length(reason()) > 0 && nchar(trimws(reason())) > 0) {
reason_text_block <- c(
reason(),
""
)
}
# CURRENT AQI--------------------------------------------------------------------------------
AirNow <- readRDS(paste0("data/AirNow/", today, "_AirNow.rds"))
aqi_labels <- c("Good", "Moderate", "Unhealthy for Sensitive Groups", "Unhealthy", "Very Unhealthy", "Hazardous")
aqi_breaks <- c(0, 9, 35.4, 55.4, 125.4, 225.4, 1000)
# Step 1: Filter to the most recent GMT date
most_recent_gmt <- max(AirNow$date_gmt, na.rm = TRUE)
# Step 2: Convert to MDT (UTC-6 or -7 depending on daylight saving; we'll use America/Denver)
# `America/Denver` handles daylight saving automatically
AirNow_filtered <- AirNow %>%
filter(date_gmt == most_recent_gmt) %>%
mutate(date_mdt = with_tz(date_gmt, tzone = "America/Denver"))
# Step 3: Assign AQI category based on PM2.5 value
AirNow_aqi <- AirNow_filtered %>%
mutate(
AQI_category = cut(
sample_measurement,
breaks = aqi_breaks,
labels = aqi_labels,
include.lowest = TRUE,
right = TRUE
)
) %>%
select(site_name, date_mdt, sample_measurement, AQI_category)
ordered_levels <- rev(aqi_labels)
# Filter out "Good" and make AQI_category a factor with reversed levels
aqi_filtered <- AirNow_aqi %>%
filter(AQI_category != "Good") %>%
mutate(AQI_category = factor(AQI_category, levels = ordered_levels))
# Time stamp from first row
report_time <- format(AirNow_aqi$date_mdt[1], "%I%p on %m/%d/%Y") %>%
sub("^0", "", .)  # remove leading zero manually
# e.g., 5AM on 7/25/2024
# Function to format lists nicely
pretty_list <- function(x) {
if (length(x) == 0) return("")
if (length(x) == 1) return(x)
if (length(x) == 2) return(paste(x, collapse = " and "))
paste(paste(x[-length(x)], collapse = ", "), "and", x[length(x)])
}
# Build one paragraph per AQI category
aqi_text_chunks <- aqi_filtered %>%
arrange(AQI_category) %>%
group_by(AQI_category) %>%
summarise(
sites = pretty_list(site_name),
.groups = "drop"
) %>%
mutate(
paragraph = glue("As of {report_time}, particulate levels in {sites} are {AQI_category}.")
) %>%
pull(paragraph)
# Join with blank lines between each
final_aqi_text <- paste(aqi_text_chunks, collapse = "\n\n")
final_aqi_text <- paste0(final_aqi_text, "\n")
cat(final_aqi_text)
# HEALTH MESSAGES---------------------------------------------------------------------
health_messages <- list(
"Hazardous" = "When air quality is Hazardous... State and local health officials recommend that everyone should avoid any outdoor exertion; people with respiratory or heart disease, the elderly, and children should remain indoors.",
"Very Unhealthy" = "When air quality is Very Unhealthy... State and local health officials recommend that people with respiratory or heart disease, the elderly, and children should avoid any outdoor activity; everyone else should avoid prolonged exertion.",
"Unhealthy" = "When air quality is Unhealthy... State and local health officials recommend that people with respiratory or heart disease, the elderly, and children should avoid prolonged exertion; everyone else should limit prolonged exertion.",
"Unhealthy for Sensitive Groups" = "When air quality is Unhealthy for Sensitive Groups... State and local health officials recommend that people with respiratory or heart disease, the elderly and children should limit prolonged exertion.",
"Moderate" = "When air quality is Moderate... State and local health officials recommend that unusually sensitive people should consider reducing prolonged or heavy exertion."
)
# AQI levels in reverse severity order (most severe first)
aqi_levels <- c("Hazardous", "Very Unhealthy", "Unhealthy",
"Unhealthy for Sensitive Groups", "Moderate")
# Get unique AQI categories in the filtered data (excluding Good)
present_categories <- unique(aqi_filtered$AQI_category)
present_categories <- intersect(aqi_levels, present_categories)
# Assemble messages
health_text <- unlist(lapply(present_categories, function(cat) {
c(health_messages[[cat]], "")  # Add empty line after each
}))
# MORE INFORMATION---------------------------------------------------------------------
more_information <- paste0("For more information visit the Montana Department of Environmental Quality at http://todaysair.mtdeq.us")
# Final output text
full_text <- c(header_lines, county_lines, alert_text, reason_text_block, final_aqi_text, health_text, more_information)
cat(full_text)
# Write to file
writeLines(full_text, file)
}
)
paste0(today, "_AQA_text_product.txt")
content = function(file) {
# Determine the correct file path based on the outlook choice
file_path <- if (aqi_outlook_choice() == "Tomorrow AQI Outlook") {
paste0("data/county_24hr_avg/", today, "_county_24hr_avg.rds")
} else {
paste0("data/county_24hr_avg/", today, "_updated_today_AQI_outlook.rds")
}
if (!file.exists(file_path)) {
writeLines("County data file not found.", file)
return()
}
df <- readRDS(file_path)
df <- df %>%
mutate(AQA_Required = case_when(
is.na(AQI_category) ~ "No",
AQI_category %in% c("Good", "Moderate") ~ "No",
TRUE ~ "Yes"
))
# Identify counties where AQA is required
aqa_counties <- df %>%
filter(AQA_Required == "Yes") %>%
pull(county)
# Prepare list of all counties with AQA flag
county_lines <- paste0(df$county, ";", df$AQA_Required)
# Standard header
header_lines <- c(
glue::glue("-Expiration Time: {exp_time()} on {format(exp_date(), '%m/%d/%Y')}"),
"",
"-Counties",
""
)
# Optional alert message if any 'Yes' present
alert_text <- character()
if (length(aqa_counties) > 0) {
alert_text <- c(
"",
"-Text for alert:",
glue::glue(
"The Montana Department of Environmental Quality has issued an air quality alert for {paste(aqa_counties, collapse = ', ')} counties in effect until {exp_time()} on {format(exp_date(), '%m/%d/%Y')}"
),
"An Air Quality Alert means that particulates have been trending upwards and that an exceedence of the 24 hour National Ambient Air Quality Standard (NAAQS) has occurred or may occur in the near future.",
""  # <-- line break after alert
)
}
# REASON FOR ALERT--------------------------------------------------------------------------
reason_text_block <- character()
if (!is.null(reason()) && length(reason()) > 0 && nchar(trimws(reason())) > 0) {
reason_text_block <- c(
reason(),
""
)
}
# CURRENT AQI--------------------------------------------------------------------------------
AirNow <- readRDS(paste0("data/AirNow/", today, "_AirNow.rds"))
aqi_labels <- c("Good", "Moderate", "Unhealthy for Sensitive Groups", "Unhealthy", "Very Unhealthy", "Hazardous")
aqi_breaks <- c(0, 9, 35.4, 55.4, 125.4, 225.4, 1000)
# Step 1: Filter to the most recent GMT date
most_recent_gmt <- max(AirNow$date_gmt, na.rm = TRUE)
# Step 2: Convert to MDT (UTC-6 or -7 depending on daylight saving; we'll use America/Denver)
# `America/Denver` handles daylight saving automatically
AirNow_filtered <- AirNow %>%
filter(date_gmt == most_recent_gmt) %>%
mutate(date_mdt = with_tz(date_gmt, tzone = "America/Denver"))
# Step 3: Assign AQI category based on PM2.5 value
AirNow_aqi <- AirNow_filtered %>%
mutate(
AQI_category = cut(
sample_measurement,
breaks = aqi_breaks,
labels = aqi_labels,
include.lowest = TRUE,
right = TRUE
)
) %>%
select(site_name, date_mdt, sample_measurement, AQI_category)
ordered_levels <- rev(aqi_labels)
# Filter out "Good" and make AQI_category a factor with reversed levels
aqi_filtered <- AirNow_aqi %>%
filter(AQI_category != "Good") %>%
mutate(AQI_category = factor(AQI_category, levels = ordered_levels))
# Time stamp from first row
report_time <- format(AirNow_aqi$date_mdt[1], "%I%p on %m/%d/%Y") %>%
sub("^0", "", .)  # remove leading zero manually
# e.g., 5AM on 7/25/2024
# Function to format lists nicely
pretty_list <- function(x) {
if (length(x) == 0) return("")
if (length(x) == 1) return(x)
if (length(x) == 2) return(paste(x, collapse = " and "))
paste(paste(x[-length(x)], collapse = ", "), "and", x[length(x)])
}
# Build one paragraph per AQI category
aqi_text_chunks <- aqi_filtered %>%
arrange(AQI_category) %>%
group_by(AQI_category) %>%
summarise(
sites = pretty_list(site_name),
.groups = "drop"
) %>%
mutate(
paragraph = glue("As of {report_time}, particulate levels in {sites} are {AQI_category}.")
) %>%
pull(paragraph)
# Join with blank lines between each
final_aqi_text <- paste(aqi_text_chunks, collapse = "\n\n")
final_aqi_text <- paste0(final_aqi_text, "\n")
cat(final_aqi_text)
# HEALTH MESSAGES---------------------------------------------------------------------
health_messages <- list(
"Hazardous" = "When air quality is Hazardous... State and local health officials recommend that everyone should avoid any outdoor exertion; people with respiratory or heart disease, the elderly, and children should remain indoors.",
"Very Unhealthy" = "When air quality is Very Unhealthy... State and local health officials recommend that people with respiratory or heart disease, the elderly, and children should avoid any outdoor activity; everyone else should avoid prolonged exertion.",
"Unhealthy" = "When air quality is Unhealthy... State and local health officials recommend that people with respiratory or heart disease, the elderly, and children should avoid prolonged exertion; everyone else should limit prolonged exertion.",
"Unhealthy for Sensitive Groups" = "When air quality is Unhealthy for Sensitive Groups... State and local health officials recommend that people with respiratory or heart disease, the elderly and children should limit prolonged exertion.",
"Moderate" = "When air quality is Moderate... State and local health officials recommend that unusually sensitive people should consider reducing prolonged or heavy exertion."
)
# AQI levels in reverse severity order (most severe first)
aqi_levels <- c("Hazardous", "Very Unhealthy", "Unhealthy",
"Unhealthy for Sensitive Groups", "Moderate")
# Get unique AQI categories in the filtered data (excluding Good)
present_categories <- unique(aqi_filtered$AQI_category)
present_categories <- intersect(aqi_levels, present_categories)
# Assemble messages
health_text <- unlist(lapply(present_categories, function(cat) {
c(health_messages[[cat]], "")  # Add empty line after each
}))
# MORE INFORMATION---------------------------------------------------------------------
more_information <- paste0("For more information visit the Montana Department of Environmental Quality at http://todaysair.mtdeq.us")
# Final output text
full_text <- c(header_lines, county_lines, alert_text, reason_text_block, final_aqi_text, health_text, more_information)
cat(full_text)
# Write to file
writeLines(full_text, file)
}
View(content)
filename = function() {
cat("Generating filename with today =", today, "\n")
paste0(today, "_AQA_text_product.txt")
}
View(filename)
runApp()
AirNow_date <- as.Date(update_date)
# Get the current UTC hour from the system clock
current_utc_time <- now(tzone = "UTC")
current_hour <- hour(current_utc_time)
# Format date parts
end_date_str <- format(AirNow_date, "%Y-%m-%d")
start_date_str <- format(AirNow_date - 3, "%Y-%m-%d")
UTC_hr <- sprintf("T%02d", current_hour)
# Construct the URL
url <- paste0(
"https://www.airnowapi.org/aq/data/?startDate=", start_date_str, UTC_hr,
"&endDate=", end_date_str, UTC_hr,
"&parameters=PM25,PM10&BBOX=-116.202774,44.045890,-103.722305,49.229925",
"&dataType=C&format=text/csv&verbose=1&monitorType=0&includerawconcentrations=0",
"&API_KEY=4A314159-4658-4690-8CE9-F716E5EABC20"
)
cat(url)
col_names <- c("latitude", "longitude", "date_gmt", "parameter", "sample_measurement",
"units_of_measure", "site_name", "monitoring_agency", "AQSID", "Full_AQSID")
# Use tryCatch around GET call
tryCatch({
response <- GET(url, timeout(30))  # Add timeout to prevent hanging
if (status_code(response) == 200) {
csv_data <- content(response, "text")
air_quality_data <- read_csv(csv_data, col_names = FALSE)
col_names <- c("latitude", "longitude", "date_gmt", "parameter", "sample_measurement",
"units_of_measure", "site_name", "monitoring_agency", "AQSID", "Full_AQSID")
colnames(air_quality_data) <- col_names
AirNow <- air_quality_data %>%
mutate(
AQSID = as.character(AQSID),
Full_AQSID = as.character(Full_AQSID),
country_code = substr(Full_AQSID, 1, 3),
state_code   = substr(Full_AQSID, 4, 5),
county_code  = substr(Full_AQSID, 6, 8),
site_number  = substr(Full_AQSID, 9, 12)
) %>%
filter(country_code == "840", state_code == "30")
print("AirNow data retrieved successfully.")
} else {
message(paste("Failed to fetch data. Status code:", status_code(response)))
}
}, error = function(e) {
message("GET request failed with error: ", e$message)
})
# Remove rows where sample_measurement is less than -900
AirNow <- AirNow %>%
filter(sample_measurement >= -900 & parameter == "PM2.5")
saveRDS(AirNow, paste0("data//AirNow//", update_date, "_AirNow.rds"))
runApp()
runApp()
View(AirNow)
# Load and preprocess data
data <- readRDS(paste0("data/AirNow/", today, "_AirNow.rds")) %>%
mutate(
date_mdt = date_gmt - hours(6),
date_mdt_ms = as.numeric(date_mdt) * 1000,
sample_measurement = trunc(sample_measurement * 10) / 10
) %>%
filter(date_mdt >= today - hours(48)) #use Sys.time() when operational
data <- readRDS(paste0("data/AirNow/", today, "_AirNow.rds"))
# Load and preprocess data
data <- readRDS(paste0("data/AirNow/", today, "_AirNow.rds")) %>%
mutate(
date_mdt = date_gmt - hours(6),
date_mdt_ms = as.numeric(date_mdt) * 1000,
sample_measurement = trunc(sample_measurement * 10) / 10
)
View(data)
str(data)
update_date <- "2025-05-27" # use temporarily
today <- as.Date(update_date)
# Load and preprocess data
data <- readRDS(paste0("data/AirNow/", today, "_AirNow.rds")) %>%
mutate(
date_mdt = date_gmt - hours(6),
date_mdt_ms = as.numeric(date_mdt) * 1000,
sample_measurement = trunc(sample_measurement * 10) / 10
) %>%
filter(date_mdt >= today - hours(48)) #use Sys.time() when operational
View(data)
runApp()
library(httr)
library(lubridate)
# today <- as.Date(update_date) # old way of defining based on update_date
# start_date <- today - 2
AirNow_date <- as.Date(update_date)
# Get the current UTC hour from the system clock
current_utc_time <- now(tzone = "UTC")
current_hour <- hour(current_utc_time)
# Format date parts
end_date_str <- format(AirNow_date, "%Y-%m-%d")
start_date_str <- format(AirNow_date - 3, "%Y-%m-%d")
UTC_hr <- sprintf("T%02d", current_hour)
# Construct the URL
url <- paste0(
"https://www.airnowapi.org/aq/data/?startDate=", start_date_str, UTC_hr,
"&endDate=", end_date_str, UTC_hr,
"&parameters=PM25,PM10&BBOX=-116.202774,44.045890,-103.722305,49.229925",
"&dataType=C&format=text/csv&verbose=1&monitorType=0&includerawconcentrations=0",
"&API_KEY=4A314159-4658-4690-8CE9-F716E5EABC20"
)
cat(url)
col_names <- c("latitude", "longitude", "date_gmt", "parameter", "sample_measurement",
"units_of_measure", "site_name", "monitoring_agency", "AQSID", "Full_AQSID")
# Use tryCatch around GET call
tryCatch({
response <- GET(url, timeout(30))  # Add timeout to prevent hanging
if (status_code(response) == 200) {
csv_data <- content(response, "text")
air_quality_data <- read_csv(csv_data, col_names = FALSE)
col_names <- c("latitude", "longitude", "date_gmt", "parameter", "sample_measurement",
"units_of_measure", "site_name", "monitoring_agency", "AQSID", "Full_AQSID")
colnames(air_quality_data) <- col_names
AirNow <- air_quality_data %>%
mutate(
AQSID = as.character(AQSID),
Full_AQSID = as.character(Full_AQSID),
country_code = substr(Full_AQSID, 1, 3),
state_code   = substr(Full_AQSID, 4, 5),
county_code  = substr(Full_AQSID, 6, 8),
site_number  = substr(Full_AQSID, 9, 12)
) %>%
filter(country_code == "840", state_code == "30")
print("AirNow data retrieved successfully.")
} else {
message(paste("Failed to fetch data. Status code:", status_code(response)))
}
}, error = function(e) {
message("GET request failed with error: ", e$message)
})
# Remove rows where sample_measurement is less than -900
AirNow <- AirNow %>%
filter(sample_measurement >= -900 & parameter == "PM2.5")
saveRDS(AirNow, paste0("data//AirNow//", update_date, "_AirNow.rds"))
View(AirNow)
runApp()
runApp()
runApp()
runApp()
runApp()
# Get today's date in YYYY-MM-DD format
update_date <- format(Sys.Date(), "%Y-%m-%d")
runApp()
#Update Data
library(glue)
library(lubridate)
library(fs)
library(readr)
# Get today's date in YYYY-MM-DD format
update_date <- format(Sys.Date(), "%Y-%m-%d")
compare_date <- format(Sys.Date() - 2, "%Y-%m-%d")
# update_date <- "2024-08-08"
# compare_date <- "2024-08-06"
# Start timing
start_time <- Sys.time()
cat("✅ Update started at:", format(start_time, "%Y-%m-%d %H:%M:%S"), "\n")
# Run update scripts
source("update_scripts//HRRR_download.R")
source("update_scripts//calculate_VENT_RATE.R")
source("update_scripts//calculate_county_hourly_avg.R")
source("update_scripts//calculate_VENT_window.R") # uses counties from calculate_county_hourly_avg
source("update_scripts//archive_data.R") # only run this script and below after initializing 3 days of data
source("update_scripts//get_AirNow_data.R")
source("update_scripts//model_performance.R")
source("update_scripts//calculate_trends.R")
source("update_scripts/get_fire_data.R")
# End timing
end_time <- Sys.time()
cat("✅ Update finished at:", format(end_time, "%Y-%m-%d %H:%M:%S"), "\n")
# Time difference
time_diff <- end_time - start_time
cat("⏱️ Total time elapsed:", round(as.numeric(time_diff, units = "mins"), 2), "minutes\n")
# Delete old files in data/ folders
subdirs <- dir("data", full.names = TRUE, recursive = FALSE)
for (subdir in subdirs) {
# Skip if it's the 'data/trend' directory
if (basename(subdir) == "trend") next
if (!dir_exists(subdir)) next  # Skip if not a directory
# Get all files (not folders) in this subdirectory
files <- dir(subdir, full.names = TRUE, recursive = FALSE)
files <- files[file.info(files)$isdir == FALSE]
if (length(files) > 5) {
# Sort by modification time (newest first)
files_to_keep <- files %>%
tibble::tibble(path = ., mtime = file.info(.)$mtime) %>%
arrange(desc(mtime)) %>%
slice_head(n = 5) %>%
pull(path)
# Files to delete = all files not in the 5 most recent
files_to_delete <- setdiff(files, files_to_keep)
for (file_path in files_to_delete) {
cat("🗑️ Deleting old file:", file_path, "\n")
file.remove(file_path)
}
}
}
file.path(R.home("bin"), "Rscript.exe")
if (!pingr::is_online()) stop("No internet connection.")
install.packages("pingr")
library(pingr)
if (!pingr::is_online()) stop("No internet connection.")
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
